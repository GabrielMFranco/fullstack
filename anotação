         Ferramentas de Pesquisas
-npm    -devdocs
------------------------------------------------------------------
                        GIT HUB
 Comandos para trabalhar com repositório local
- git init => inicio o git no seu projeto
- git status => verifica alterações de pastas e arquivos no projeto
- git add . => adiciona todos os arquivos e pastas modificadas
- git commit -m "mensagem aqui" => cria e escreve um commit
- git log => historico de commit do projeto
- git push=> envia alterações locais para locais remotos
- git pull => faz as alterações de um repositorio remoto para o seu local
- git clote => cloca o repositorio remoto para o pc local

------------------------------------------------------------------
                        HTML
 Comentários:
    <-- comentário... -->

 Tags:
- Identificado por < >
- Podem ser identificadas por atriburos de 'id' ou 'class'

- <br> => quebra de linha              - &nbsp; => espaço
- <p> => Paragrafo e quebra de linha   - <a href=" "> => link
- <em> => enfase na palafra entre tag  - <strong> => Negrito
- <mark> => efeito marca texto         - <s> => efeito riscado


            Caracteres Reservados
- &lt; &gt; => < >                     -<code> => Altera fonte para cod
<pre> => permite que tenha espaço, usado em conjunto do 'code'

            Atribitos HTML
 Informações extras / configurações
            Atributos Booleano
 Não precisa de conteúdo => hidden 
            Atributos Globlais
 Podem ser usados em todos os elementos HTML
 -id=" " => identificado no css pelo #   - class=" " => itenficado pelo .
 - data-..=" " => adiciona dados personalizados
 - style = " " => Altera o css diretamente pelo HTML,
            
            Tags Sêmanticas
   Usado para deixar o código semantico e favorecer o site:
- <header> => cabeçalho                 -<main> => Conteúdo principal
- <aside> => conteudo segundario        -<footer> => rodapé
- <nav> => navegação, contem links.     -<Section> => Definem seções.
- <article> => Definem um artigo
            Tags genéricas
-<div>                                  -<spam>

            Listas
- <ul> => Lista não ordenada          -<ol> => Lista ordenada
- <li> => item da lista               -<dl> =>
- <dt> => 

            Caminhos absolutos e relativos
 Absoluro => Um caminho que é especificado a partir da raiz do sistema de arquivos
 Relativo => Um caminho que pe especificado a partir do diretório atual

------------------------------------------------------------------
                        CSS
 Cascading Stylesheet / folha de estilo em cascata

 Comentarios:
   /* comentario */

            Box Model
 Display:
-Block => ocupa a linha toda           -inline => um ao lado do outro
-flex => flexbox                       -grid
            Position
- relative => relativo a si mesmo
- absolute => relativo ao containing block proximo ou inicial
- fixed => fica fixo na tela, se dar scroll ele acompanha no munitor no -          mesmo ponto fixo 
- sticky => acompanha o scroll sem sair da tela, relativo ao elemeto pai -           que tenha mec de scroll

            Pseudo Classes :
- :hover => Quando passar o mouse em cima acontece uma interação
         ex: div:hover{ background-color: green;  }
- :not => colocar uma função em um elemento que não tem o requisito.
       ex: div:not(.nao){background-color:blue;} adiciona o background nos
           elementos que não tem a classe.nao
- :has => o elemento que tenha o requisito recebe...
       ex: section:has(div:hover){ Se tiver hover em alguma div, vai recer
           o que foi fornecido}
- :root => 
- :nth-child(n) => pega o elemento 'n' fornecido e aplica o que foi dado

            Pseudo Elements ::
- ::first-elements => pega todas as primeiras letras do conteúdo
- ::before / later => Cria elementos antes ou depois do conteudo

            Flexbox
-Main => eixo principal               -Cross => eixo cruzado/oposto

 flex-direction:
- row => um ao lado do outro        - collumn => em coluna   
- reverse => inverte o lado =>row-reverse =>collum-reverse

            Alinhamento e espaçamento
- justify-content => alinhamento dentro do container  
      flex-start => gruda no main-start
      flex-end => gruda no main-end
      center => centraliza no main
      space-evenly => espaços constantes
      space-around => espaço ao redor
      space-between => espaço entre elementos
- align-content => apenas com flex wap abilitado
- align-self => apenas o elemento
- align-items => alinhamento no eixo cruzado
      stretch => estica no tamanho do container
      flex-start => gruda no cross-start
      flex-end => gruda no cross-end
      center => centraliza no cross
      baseline => alinha na linha base do texto
- gap => espaço entre elementos
- margin => alinha com base na margin

            Multi linha
 flex-wrap:
- wrap => quebra o elemento se não tiver espaço na div
-nowrap =>

            sizing
- flex-basic => tamanho do item relativo ao eixo principal
- flex-grow => crescimento automatico do item conforme espaço vazio
- flex-shrink => encolhimento automatico do item 
Shorthand => flex: grow shring basic;

            GRID
 Colunas e linhas que posicionam o conteudo do site como você preferir
 Cria linhas conforme a quantia de elemtentos dentro dele
- Display: inline-grid: => aceita algumas propriedades que o inline não 
          aceitaria
  Grid template:
- columns; => altera o tamanho das colunas, podendo ser dividida em px ou 
          em fr, que divide em espaços iguais, podemos usar também o repeat( ) ex: repeat(3, 1fr), ele faz 3 elementos dividido em uma frasão, ficando dividido igualmente na tela, se tiver um quarto elemento ele é jogado pra outra linha 
- rows; =>altera o tamanho das linhas, 
-areas; => da uma itentificação para as areas e onde ela ocupa, podendo 
           repetir se ela for abranger mais de uma coluna ou linha. EX:
           "a b b" 
           "a b b" // podemos add tamanho por px aqui ex: 50px
           "a c d" 40px / 80px 1fr 2fr;

           Assim é só colocar a identificação nos itens que ele ocupa o espaço, podemos colocar como as tags também.

 Itens
-grid-collums: => tem como base as linhas virtuais
 start => qual coluna ele começa 
 end => qual coluna ele termina
-grid-row://
 Podemos dar espaço entre os elementos com o 'gap', 'row-gap', 'collumn-gap'

 Alinhamento no grind
- Aplicadas no container:
 aligh-content => alinha no rixo y, com center, space-bettween ...
 justify-content => alinha no eixo x
 place-content => junção do alight e justify

 aligh-items => alinha os itens eixo y , start,end, ...
 justify-items => alinha os itens no eixo x,
 place-items => trabalha com os 2, aligh e justify

- Aplicadas no itens?
 align-self => aplica as mesmas coisas, porem em um unico item.
 justify-self => 
 place-selt => 

 Propriedades auto do grid
- grid-auto-flow => fluxo altomatico para column ou row q é o padrao
- grid-auto-columns => max-content,...

-----------------------------------------------------------------------
                                    FORMS
 <form action= "pra onde vai os dados" method="post ou get"> </form>

 <button> => type ="submit => envia dados
                   "reset" => limpar dados
                   "button" => inicia uma ação
- autofocus => faz com que o botão fique selecionado para facilitar
- disabled => desativa o botão 
- name => nome do botao
  value=> valor ao ser utilizado ao enviar o formulario

<input type="text" name="nome"> =>
- Atributos fundamentais:
  name => o valor do imput ao enviar o formulario
  type => define tipo de dado
- Atributos gerais:
  value =>
  autocomplete=>
  size=> cresce e diminui o tamanho do imput
  autofocus=> quando abrir o form esse campo vai ficar focado
  disabled=> desabilitar qual campo quiser
  readonly=> não deixa autorar o que ta escrito
  form=> 
  required=> tem que preencer o campo para deixar enviar
  placeholder=> texto dentro do texto com dica dq colocar ali

<input type="number"> => aceita apenas números
                         min/max=>numero minimo e maximo 
                         step=> pular numero,ex: de 10 em 10
<input type="email"> => valida um email
                        multiple => aceita mais de um email, separado por ,
                        minlength/maxlength=> numero de letras
                        pattern => verifica as informações ex:
                              pattern=".+@
                        title => avisa oq precisa pra validar ex:
                              title="apenas @gmail.com"
<input type="password"> => oculta o texto com *
                           minlength/maxlength =>
                           pattern => ex: [0-9a-fA-F]{4,8} 
                           inputmode=> numeric => abre teclado do cel
                           title=> 
<input type="file"> => envia um ou mais arq pelo form, o form precida do
                       atributo enctype="multipart/form-data".
                       multiple => usa mais de um arquivo
                       accept => tipo de arquivo que vai ser aceito.ex:
                        accpt="video/*" aceita todo tipo de video
                        accpet="audio/mp3" apenas audio, mp3
<input type="range"> => cria um barra igual de volume
                        min/max => define o min e max dos numeros
                        step => quantidade de número que pula
                        value => o valor que a barra inicia
<input type="color"> => interface que seleciona cor
                        value => define a cor inicial (RGB)
                        datalist => define uma pre definição de cor:
                        <option value="cor">, colca um id no datalist e menciona ele no list="id"  
<input type="checkbox"> => seleção de valores
                           value => como o valor selecionada vai ser enviado ex: value="carro" ai no checkbox adicona o nome do carro
                           pode ter varios valores
                           cheched=> começa com algo marcado
<input type="radio"> => marca apenas um no grupo de opções.
<input type="hidden"> => sempre trafega informações mas sempre escondidas
                         value="id" => não aparece pra quem meche no form
 Sempre usar o caniuse.com para pesquisar os inputs e se atualizar.

<label for="id do imput"> => podemos colocar o input dentro do label pra
                             não precisar usar o for
<textarea name="" id="" cols="" rows=""> => mais de uma linha de texto
                                        minlength/maxlength=>
<select name="" muitile size="2">
    <option value="">Selecione</option>
    <option label="fiat" value="fiat">
    <option label="audi" value="audi">
    size=> quantos aparece na tela e acrescenta rolagem se necessario
    <optgroud> => separa outro grupo dentro dos option

<fielset> => agrupamento de campos
---------------------------------------------------------------------------
OBS Desafio:

fazendo botoes com radio e label:
  - ocultar o input com o 'all: unset' e colocar position absolute, para sobrepor
    o campo que ele está, e adicionar position relative no campo "pai" para 
    mostrar qual campo ele vai se basear, em seguida adicionar o 'inset:0',
    no label basta centralizar e configurar do jeito que precisar.
  - para alterar a cor usar o '&:hover, &:focus' e para mudar quando selecionar
    usar o '&:has(:checked)'

62.5
--------------------------------------------------------------------------

          CSS Function
- transform:
   movimentação - rotação - tamanho
   translate(X , Y)=> move no eixo bloco, sendo o primeiro valor no eixo X
                      e o segundo valor no eixo Y.
   rotate(40deg) => gira o bloco na quantidade determinada
   scale(2) => aumenta o tamanho, nesse caso ta dobrando o tamanho

- transform numerica basica:
   width: calc(20% + 4rem) => vai pegar 20% da pagina mais 4rem, podemos 
      usar qualquer operação basica no calc

- Comparison:
   min/max=> heigh: min(90vw) => define uma altura minima, se tiver mais de
             um valor ele pegar o menor, podemos usar o calc dentro tb.
   clamp => font-size: clamp(1rem, 7vw, 4rem) => valor min, desejado, max, 

- Filter:
   blur => filter: blur(10px); => deixa com efeito borrado.
   brightness => filter: brightness(3) => da brilho
   contrast => filter: contrast(2) => adiciona contraste aceita positivo e 
        negativo,
   drop-shadow => filter: drop-shadow(1rem 1rem 2rem cor)
   opacity => filter: opacity(0.2)
   invert => filter: invert() => inverte as cores 
   hue-rotate => filter: hue-rotate(0deg a 360deg) => gira a palheta de cores

- Color:
   rgb => red,green,blue => valores de 0 a 255 => rgb(255,40,60)
   hsl => hue, saturação, brilho => hsl(300,78%, 48%, 50%)
   color-mix => color-mix(in hsl, hsl(10 100% 50%), hsl(60 100% 50%) ) 
                mistura as duas cores.
- dradient:
   linear-gradient(to right,90deg, red, blue) => faz um degrade das cores
      na direção que foi pedida, quantos ° de angulação e quais as cores.
   radial-gradient(red, blue) => faz um degrade em formato radial

- shape:
   circle => clip-path: circle() => cria um circulo dentro na div, porem 
      pode cortar o conteudo
   polygon => clip-path: polygon() => faz um formato requerido, fazer o 
      formato pelo site https://bennettfeely.com/clippy/ 

- references:
   var => pega a variavel que foi definica atrazer do 'css :root' e aplica.
   url => pega uma url e utiliza onde foi pedido. ex: backgroud: url(...);
   attr() =>

                                    Media Query
  @import url("screen.css") screen and (orientatio: portrait)

  podemos também adicionar direto no css:
  @media screen and (min-width: 400px)and(max-width: 600px){
    ......css
  }
- range => (400px < width < 50px) => se a largura estiver entre.
           (width >=500) => se a largura for maior ou igual a 500


--------------------------------------------------------
obs:
para adicionar gradient no texto usar o:
   -webkit-background-clip:text; 
   background-clip: text;
   color:transparent;
adicionar o texto do botao em uma area-label
--------------------------------------------------------

            CSS Animation & Transition
animação => começa em um local e termina em outro
transition => tempo de animação 

transition-property: opacity, transform (propriedade);
transition-duration: 1s (tempo), 20ms;
transition-dalay: => atraso para transição acontecer

transition-timing-function: linear (ir e sair)
                            ease => ease-in(chegada suave), ease-out(saida suave).
                            cubic-bezier
                            steps => da paços até o final
short hand:
 transition: opacity 400ms ease, transform 1s ....;

- retirar motion se for pedido pelo usuario:
  @media (prefers-reduced-motion){ div{ transition:none; } }

-Animation:
   @keyframes nome{
      from => de onde sai
      to => onde chega
   }
animation-fill-mode: forwards => mantem as popriedades finais
                     backwards => mantem as propriedades iniciais
                     both=> puxa as iniciais e mantem as finais
animation-iteration-count: => quantas vezes faz a ação
short hand:
 animation: nome 1s 1s bpth infinite alternate ease;

animarion-timeline:
  scroll() => trabalha com o scroll da tela
  view() => trabalha conforme aparece na tela
animation-range:
  start: 10px => começa a 10px do deslocamento do fundo
  end: 50% => termina a 50% do deslocamento do fundo 
  contain => começa quando o final do elemento entrar na vp
  cover => começa quando o elemento entra na vp
  entry => começa quando entra e termina quando passa o final do elemento
  exit => inicia quando começa a sair da tela

  transition: background-color 0.5s;
  Aplica diversas transformações visuais a um elemento, como rotação, translação e dimensionamento.
  transition-duration: 0.5s;

------------------------------------------------------------------------
                                 JS

- Variavel => espaço reservado na momória ram para armazenar algo        temporariamente.

 case-sensetive => letra maiusca ou minusca faz diferença.

 var => variavel global que o valor pode ser alterado 
 let =>  variavel de bloco com valores alteraveis 
 const => variavel de bloco com valor fixo

- Escopo => limite até onde uma variavel vai estar disponivel.
  Define o contexto no qual uma variavel pode ser referenciada e alterada.

- Hoisting => 
   * Podemos criar uma variavel antes de ser declarada.
   * Toda função ou variavel global pode ser utilizada por todo o codigo independende da ordem que foi declarada.

- string => textos:
   * " ou ' para escrever textos.
   * ` usado para escrever multiplas linhas ou referenciar variaveis dentro do texto.

   concatenar textos:
   let message = "ola" + userName + ". Seja bem vindo"

   Templates literals:
   console.log(`olá, ${userName}. Seja bem vindo`)

- number => numeros
   incremento:
   number++ => number = number + 1
   number += 10  => number = number + 10

   descremento:
   number-- => number = number - 1
   number -= 10  => number = number - 10

- boolean => verdadeiro / falso

- Conversão de tipos => feito de forma conciente
   let value = "9"  => ta em forma de texto.
   console.log(Number("9"))  => converteu para número

   let age = 18  => ta em forma de número
   console.log(age.toString())  => converteu para texto
   console.log(String(age))  => segunda versão de conversão 

- Coerção de tipos => o js tenta converter automaticamente antes de realizar uma operação.

- Atibuitos
   = => atribuição                        > => maior que 
   == => comparação                       < => menor que
   === => comparação a conteudo e tipo    <= => menor ou igual
   !== => diferente                       =>  => maior ou igual

- Operadores logicos:
   && => and (e)
   || => or (ou)
   !... => not (inverte o valor na apresentação)  

- Operador condicional ternário:
   let age = 18
   console.log(age >= 18 ? "você pode dirigir":"você não pode dirigir.")

- Switch
   switch(conteudo pra analisar){
      case 1: => valor pra analisar
         console.log("...")
         break  => se executar o comando, ele pula o switch
      case 2:
         console. log("...")
         break
      default:  => quando não se encaixa nas sugeridas
         console.log("Essa opção não existe")
         break
   }

- Tratamento de Exceções:
   try => todo comando que vai tentar executar
   cath => se não der certo, tratamento de erro
   finally => se der certo

   try{  => tenta executar algo
      ...
   }catch(error){  => captura o erro pra tratar
      console.log("Não foi possivel executar seu pedido") => mostra o erro de forma mais amigavel pro usuario.
   }finally{  => executa algo independente se deu certo ou não (opcional)
      console.log("fim")
   }

- Função:
   function nome(){  => (parametro/variavel => só vale na função) {escopo}
   }
    
   function sun(a,b){
      let result = a + b
      console.log(result)  => mostra o resultado
      return result  => retorna o resultado pra quem chamou a função
   }

   Comentario de Documentação:
   /**  */

   Arrow function:
   const showMessage = function(){ }  =>Normal
   const showMessage = () =>{ }    =>arrow

   callback function:
   Podemos passar uma função pra outra função e executar lá dentro

- DOM => document object model => representaçao de dados dos objetos que compoem a estrutura e o conteudo do html

                              DOCUMENT
                                 |
                     DEAD-------HTML------- BODY
                       |                      |
                     TITLE                   H1  P ...

console.log(guest.textContent) => Retorna o conteudo visivel e oculto
console.log(guest.innerText)   => Retorna somente o conteudo visivel
console.log(guest.innerHTML) => Retorna o html como texto  

input.classList.add("input-error") => adiciona a class
input.classList.remove("input-error") => remove a class
input.classList.toggle("input-error") => remove se tiver a classe e add se n tiver (usado em abas de app)

- alterando o CSS pelo JS:
   const button = document.querySelector("button")
   button.style.backgroundColor = "red"

- Adicionando novo elemento pelo JS:
   .append => adiciona apos todos os filho
   .prepend => adiciona antes do primeiro 
   .appendChild => adiciona apenas um elemento


      const guests = document.querySelector("ul") => seleciona o elemento

      const newGuest = document.createElement("li") => cria elemento li nele
      newGuest.classList.add("guest") => adiciona a class no elemento
      const guestName = document.createElement("span") => cria o span

      guestName.textContent = "Chili" => adiciona o texto no span

      newGuest.append(guestName) => cria o elemento li
      guests.append(newGuest) => coloca o span com texto no li


   .setAttribute("input") => muda os atributos do elemento que for selecionado
   .removeAttribute("id") => remove atributo
   .window.addEventListener(...) => fica observando algum evento 
   
   *Podemos simplificar o mode de observar eventos:
   form.onsubmit = (event) =>{}; => vai observar o click do submit no form

   .on... => observa o ultimo que foi criado, se tiver outro on... acima, vai ignorar o de  cima e pegar o ultimo
   .addEventListener => pega todos


   Eventos:
   keydown => quando uma tecla é pressionada, captura tudo, CTRL,SHIFT...
   input.addEventListener("keydow", (event)=>{
      console.log(event.key) => key mostra apenas as teclas sem outras info
   })
   keypress => quando uma tecla tipo caractere é pressionada, letras,num..
   input.addEventListener("keypress", (event)=>{
      console.log(event.key)
   })
   change => quando conteudo muda
   inout.oncharge = (()=>{
      console.log("O input mudou!")
   })

- Compreendendo Expressoes:
 / \D + / g
 / => inicio e fim da expressão
 \D => pega os caracteres que não sejam digitos
 + => pega os caracteres seguidos e junta
 g => global, texto todo


- Depuração de codigo - Debug:
   Processo de encontrar e corrigir erros


- OBJETOS: usado para fazer comparações concretas ou não concretas

   propriedade => define as caracteristicas (textos ou numeros)
   comportamento => métodos, oq ele executa (funçoes)

- OPTIONAL CHAINING (?.) - Encadeamento opcional
Se a propriedade ou função chamada é nullish (null or undefined), a expressão retorna undefined em vez de gerar um erro.
Útil ao explorar o conteúdi de um objeto quando não existe garantia da existencia de determinadas propriedades obrigatórias

- OPERADOR DE COALESCÊNCIA NULA (??)
Operador lógico que retorna o seu operador do lado direito quando o seu do lado esquerdo é null ou undefined. Caso ontrário, ele retorna o seu operador do lado esquerdo.

-  =>

- Array =>
   .push("item") => adiciona um item no final do array
   .unshift("item") => adiciona um item no inicio do array
   .shift() => remove o primeiro item do array
   .pop() => remove o ultimo item do array

   .indexOf("item do array") => retorna o indice do elemento
   .splice(indice pra iniciar o delete, indice que termina o del)
   .includes("item") => verifica se existe o item no array

- Repetição => 
   -while => repete até que a condição seja verdadeira
   do while => repete ao menos uma vez
   -for => repete até a condição seja falsa  
          for(variavel de controle; condição; incremento ou descremento)
   -for in => Executa iterações a partir de um objeto e percorre as propriedades
   -for of => itera sobre valores de um objeto iteravel
   -Break => encerra a repetição
   -Coninue => pula a execução e continua o loop com as outras interações

- Data e hora =>
   get => pega o que é requerido => .getHours => pega as horas
   set => altera o que é requerido => .setFullYear(1234)

   -Para sempre ter 2 digitos no que é requerido: ex
      month = (date.getMonth() +1).toString().padStart(2, "0")
      console.log(month)
   
   .toLocaleString() => exibe formatado no formato local
   .toLocaleDateString() => exibe a data no formato local
   .toLocaleDateString("en") => exibe a data no formato escolhido

- Timestamp => O número que representa uma data, valor que representa um ponto especifico no tempo
   Data no js é baseada no valor de tempo em ms
   Duas maneiras de interpretar data e hora:
   -local - localidade atual
   -UTC - TEMPO UNIVERSAL COORDENADO

- Classes =>  São formas de criar objetos e definir comportamentos utilizando construtores e métodos
   construtor => é chamado quando um objeto é instanciado
   métodos => funções associadas a objetos e descrevem o comportamento desse objeto
   herança => Uma classe pode herdar propriedades e métodps de outras classes, permitindo a reutilização de código. (extends)

   métodos estaticos => são acessados sem instanciar a classe


   


   



















